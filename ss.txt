vAim:
 Implement pass two of a two pass assembler.
Program:
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
void main()
{
char lbl[10],opcd[10],oprnd[10],code[10],ab[20],addr[20],symbl[10],locctr[20],value[20];
int i,len=20,slen,start;
FILE *f1,*f2,*f3,*f4,*f5;
f1=fopen("output.txt","r");
f2=fopen("symtab.txt","r");
f3=fopen("objcode.txt","w");
f4=fopen("file.txt","w");
f5=fopen("optab1.txt","r");
fscanf(f1,"%s%s%s%s",locctr,lbl,opcd,oprnd);
if(strcmp(opcd,"START")==0)
{
start=atoi(oprnd);
fprintf(f4,"%s\t %s\t %s\n",lbl,opcd,oprnd);
fprintf(f3,"H^%s^00%s^00%d",lbl,oprnd,len);
fscanf(f1,"%s%s%s%s",locctr,lbl,opcd,oprnd);
fprintf(f3,"\nT^00%d^%d",atoi(locctr),len);
}
while(strcmp(opcd,"END")!=0)
{
if(strcmp(opcd,"BYTE")==0)
{
if(oprnd[0]=='C')
{
slen=strlen(oprnd)-3;
fprintf(f4,"%d\t%s\t%s\t%s\t",atoi(locctr),lbl,opcd,oprnd);
fprintf(f3,"^");
for(i=2;i<(slen+2);i++)
{
sprintf(ab,"%x",oprnd[i]);
fprintf(f4,"%s",ab);
fprintf(f3,"%s",ab);
}
fprintf(f4,"\n");
}
else if(oprnd[0]=='X')
{
slen=strlen(oprnd)-3;
fprintf(f4,"%d\t%s\t%s\t%s",atoi(locctr),lbl,opcd,oprnd);
fprintf(f3,"^");
for(i=2;i<(slen+2);i++)
{
fprintf(f4,"\t%c",oprnd[i]);
fprintf(f3,"%c",oprnd[i]);
}
fprintf(f4,"\n");
}
}
else if(strcmp(opcd,"WORD")==0)
{
fprintf(f4,"%d\t%s\t%s\t%s\t0000%s\n",atoi(locctr),lbl,opcd,oprnd,oprnd);
fprintf(f3,"^0000%s",oprnd);
}
else if(((strcmp(opcd,"RESW")==0)||(strcmp(opcd,"RESB")==0)))
{
fprintf(f4,"%d\t%s\t%s\t%s\n",atoi(locctr),lbl,opcd,oprnd);
}
else
{
fscanf(f5,"%s%s",code,value);
while(strcmp(code,"END")!=0)
{
if(strcmp(opcd,code)==0)
break;
fscanf(f5,"%s%s",code,value);
}
fscanf(f2,"%s%s",symbl,addr);
while(!feof(f2))
{
if(strcmp(symbl,oprnd)==0)
break;
fscanf(f2,"%s%s",symbl,addr);
}
fprintf(f4,"%d\t%s\t%s\t%s\t%d%d\n",atoi(locctr),lbl,opcd,oprnd,atoi(value),atoi(addr));
fprintf(f3,"^%d%d",atoi(value),atoi(addr));
}
rewind(f2);
rewind(f5);
fscanf(f1,"%s%s%s%s",locctr,lbl,opcd,oprnd);
}
fprintf(f3,"\n");
if(strcmp(opcd,"END")==0)
{
fprintf(f3,"E^00%d",start);
fprintf(f4,"%d\t%s\t%s\t%s\n",atoi(locctr),lbl,opcd,oprnd);
}
printf("Object Pogram produced");
}





ABSOLUTE LOADER.
Aim:
Implement an absolute loader.
Program:
#include<stdio.h>
#include<string.h>
int addr,w=0,start,ptaddr,length=0,end,count=0,k,taddr,addres,i=0,l;
char input[10],lbl[10];
FILE *f1,*f2;
void check();
void main()
{
f1=fopen("input1.txt","r");
f2=fopen("output1.txt","w");
fscanf(f1,"%s",input);
fprintf(f2,"...........................................................\n");
fprintf(f2,"MEMORY ADDRESS CONTENT\n");
while(strcmp(input,"E")!=0)
{
if(strcmp(input,"H")==0)
{
fscanf(f1,"%s%x%x%s",lbl,&start,&end,input);
addres=start;
}
else if(strcmp(input,"T")==0)
{
l=length;
ptaddr=addr;
fscanf(f1,"%x%x%s",&taddr,&length,input);
addr=taddr;
if(w==0)
{
ptaddr=addres;
w=1;
}
for(k=0;k<(taddr-(ptaddr+1));k++)
{
addres=addres+1;
fprintf(f2,"xx");
count++;
if(count==4)
{
fprintf(f2," ");
i++;
if(i==4)
{
fprintf(f2,"\n\n%x\t\t",addres);
i=0;
}
count=0;
}
}
if(taddr==start)
fprintf(f2,"\n\n%x\t\t",taddr);
fprintf(f2,"%c%c",input[0],input[1]);
check();
fprintf(f2,"%c%c",input[2],input[3]);
check();
fprintf(f2,"%c%c",input[4],input[5]);
check();
fscanf(f1,"%s",input);
}
else
{
fprintf(f2,"%c%c",input[0],input[1]);
check();
fprintf(f2,"%c%c",input[2],input[3]);
check();
fprintf(f2,"%c%c",input[4],input[5]);
check();
fscanf(f1,"%s",input);
}
}
fclose(f1);
fclose(f2);
}
void check()
{
count++;
addres++;
taddr=taddr+1;
if(count==4)
{
fprintf(f2," ");
i++;
if(i==4)
{
fprintf(f2,"\n\n%x\t\t",taddr);
i=0;
}
count=0;
}
}
